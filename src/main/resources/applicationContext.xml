<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-cpntext.xsd
       http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
">

<!--    配置数据源-->

    <!-- 引入properties配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url"    value="${url}"/>
        <property name="username"   value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

<!--    配置mybatis的SQLSessionFactory-->
    <bean   id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>      <!--配置mybatis去哪里找mapper。xml文件   -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    dao接口所在包名，spring自动扫描下面的类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"    value="cn.tarsknock.dao"/>
        <property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/>
    </bean>

<!--    事务管理,将德鲁伊的事务用spring管理起来-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--shiro的安全管理器-->
    <bean id="securityManger" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm">
            <bean id="myRealm" class="cn.tarsknock.realm.MyRealm"/>
        </property>
    </bean>
            <!--shiro过滤器-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManger"/>     <!--shiro 核心安全接口-->
        <property name="loginUrl" value="/login/fail"/>        <!--登录失败时跳转链接-->
        <property name="filterChainDefinitions">
            <value>
                /login=anon
                /admin/**=authc
            </value>
        </property>
    </bean>
            <!--保证实现了shiro内部lifecycle函数的bean执行    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
            <!-- 开启shiro注解   -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
            <!--  shiro安全权限控制  -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManger"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">

    </tx:advice>
<!--    配置事务切面-->
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* cn.tarsknock.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>
</beans>


